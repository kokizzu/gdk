package middleware

import (
	"context"
	"net/http"

	"github.com/peractio/gdk/pkg/httpx/mux"
	"github.com/peractio/gdk/pkg/logx"
	"github.com/segmentio/ksuid"
)

type (
	// RequestIDConfig defines the config for RequestID middleware.
	RequestIDConfig struct {
		// Generator defines a function to generate an ID.
		// Optional. Default value random.String(32).
		Generator func() string
	}
)

var (
	// DefaultRequestIDConfig is the default RequestID middleware config.
	DefaultRequestIDConfig = RequestIDConfig{
		Generator: func() string {
			return "be-" + ksuid.New().String()
		},
	}
)

// RequestID returns a X-Request-ID middleware.
// Generate an uuid if request header X-Request-ID is empty.
// Prefix `be-` means it was generated by server instead of client.
func RequestID(next http.Handler) http.Handler {
	return RequestIDWithConfig(next, DefaultRequestIDConfig)
}

// RequestIDWithConfig returns a X-Request-ID middleware with config.
func RequestIDWithConfig(next http.Handler, config RequestIDConfig) http.Handler {
	// Defaults
	if config.Generator == nil {
		config.Generator = DefaultRequestIDConfig.Generator
	}

	return http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
		// check if client pass the X-Request-ID header on request.
		// if empty generate one instead.
		rid := req.Header.Get(mux.HeaderXRequestID)
		if rid == "" {
			rid = config.Generator()
		}

		// set the X-Request-ID on response header too.
		req.Header.Set(mux.HeaderXRequestID, rid)
		res.Header().Set(mux.HeaderXRequestID, rid)

		// create context with X-Request-ID value.
		ctx := context.WithValue(req.Context(), logx.CtxKeyRequestID, rid)
		req = req.WithContext(ctx)

		next.ServeHTTP(res, req)
	})
}
