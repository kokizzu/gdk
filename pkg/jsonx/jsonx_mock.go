// Code generated by MockGen. DO NOT EDIT.
// Source: jsonx.go

// Package jsonx is a generated GoMock package.
package jsonx

import (
	bytes "bytes"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockOperatorItf is a mock of OperatorItf interface
type MockOperatorItf struct {
	ctrl     *gomock.Controller
	recorder *MockOperatorItfMockRecorder
}

// MockOperatorItfMockRecorder is the mock recorder for MockOperatorItf
type MockOperatorItfMockRecorder struct {
	mock *MockOperatorItf
}

// NewMockOperatorItf creates a new mock instance
func NewMockOperatorItf(ctrl *gomock.Controller) *MockOperatorItf {
	mock := &MockOperatorItf{ctrl: ctrl}
	mock.recorder = &MockOperatorItfMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockOperatorItf) EXPECT() *MockOperatorItfMockRecorder {
	return m.recorder
}

// Unmarshal mocks base method
func (m *MockOperatorItf) Unmarshal(data []byte, v interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unmarshal", data, v)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unmarshal indicates an expected call of Unmarshal
func (mr *MockOperatorItfMockRecorder) Unmarshal(data, v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unmarshal", reflect.TypeOf((*MockOperatorItf)(nil).Unmarshal), data, v)
}

// Marshal mocks base method
func (m *MockOperatorItf) Marshal(v interface{}) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Marshal", v)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Marshal indicates an expected call of Marshal
func (mr *MockOperatorItfMockRecorder) Marshal(v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Marshal", reflect.TypeOf((*MockOperatorItf)(nil).Marshal), v)
}

// Encode mocks base method
func (m *MockOperatorItf) Encode(buffer *bytes.Buffer, data interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Encode", buffer, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Encode indicates an expected call of Encode
func (mr *MockOperatorItfMockRecorder) Encode(buffer, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Encode", reflect.TypeOf((*MockOperatorItf)(nil).Encode), buffer, data)
}
