// Code generated by MockGen. DO NOT EDIT.
// Source: cache.go

// Package cache is a generated GoMock package.
package cache

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	time "time"
)

// MockRedisItf is a mock of RedisItf interface
type MockRedisItf struct {
	ctrl     *gomock.Controller
	recorder *MockRedisItfMockRecorder
}

// MockRedisItfMockRecorder is the mock recorder for MockRedisItf
type MockRedisItfMockRecorder struct {
	mock *MockRedisItf
}

// NewMockRedisItf creates a new mock instance
func NewMockRedisItf(ctrl *gomock.Controller) *MockRedisItf {
	mock := &MockRedisItf{ctrl: ctrl}
	mock.recorder = &MockRedisItfMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRedisItf) EXPECT() *MockRedisItfMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockRedisItf) Get(ctx context.Context, key string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, key)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockRedisItfMockRecorder) Get(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRedisItf)(nil).Get), ctx, key)
}

// SetEX mocks base method
func (m *MockRedisItf) SetEX(ctx context.Context, key string, seconds int64, value string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetEX", ctx, key, seconds, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetEX indicates an expected call of SetEX
func (mr *MockRedisItfMockRecorder) SetEX(ctx, key, seconds, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetEX", reflect.TypeOf((*MockRedisItf)(nil).SetEX), ctx, key, seconds, value)
}

// Exists mocks base method
func (m *MockRedisItf) Exists(ctx context.Context, key string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", ctx, key)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists
func (mr *MockRedisItfMockRecorder) Exists(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockRedisItf)(nil).Exists), ctx, key)
}

// Expire mocks base method
func (m *MockRedisItf) Expire(ctx context.Context, key string, seconds int64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Expire", ctx, key, seconds)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Expire indicates an expected call of Expire
func (mr *MockRedisItfMockRecorder) Expire(ctx, key, seconds interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Expire", reflect.TypeOf((*MockRedisItf)(nil).Expire), ctx, key, seconds)
}

// TTL mocks base method
func (m *MockRedisItf) TTL(ctx context.Context, key string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TTL", ctx, key)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TTL indicates an expected call of TTL
func (mr *MockRedisItfMockRecorder) TTL(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TTL", reflect.TypeOf((*MockRedisItf)(nil).TTL), ctx, key)
}

// HGet mocks base method
func (m *MockRedisItf) HGet(ctx context.Context, key, field string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HGet", ctx, key, field)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HGet indicates an expected call of HGet
func (mr *MockRedisItfMockRecorder) HGet(ctx, key, field interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HGet", reflect.TypeOf((*MockRedisItf)(nil).HGet), ctx, key, field)
}

// HExists mocks base method
func (m *MockRedisItf) HExists(ctx context.Context, key, field string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HExists", ctx, key, field)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HExists indicates an expected call of HExists
func (mr *MockRedisItfMockRecorder) HExists(ctx, key, field interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HExists", reflect.TypeOf((*MockRedisItf)(nil).HExists), ctx, key, field)
}

// HSet mocks base method
func (m *MockRedisItf) HSet(ctx context.Context, key, field, value string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HSet", ctx, key, field, value)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HSet indicates an expected call of HSet
func (mr *MockRedisItfMockRecorder) HSet(ctx, key, field, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HSet", reflect.TypeOf((*MockRedisItf)(nil).HSet), ctx, key, field, value)
}

// Del mocks base method
func (m *MockRedisItf) Del(ctx context.Context, key ...interface{}) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range key {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Del", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Del indicates an expected call of Del
func (mr *MockRedisItfMockRecorder) Del(ctx interface{}, key ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, key...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Del", reflect.TypeOf((*MockRedisItf)(nil).Del), varargs...)
}

// Close mocks base method
func (m *MockRedisItf) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close
func (mr *MockRedisItfMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockRedisItf)(nil).Close))
}

// MockRistrettoItf is a mock of RistrettoItf interface
type MockRistrettoItf struct {
	ctrl     *gomock.Controller
	recorder *MockRistrettoItfMockRecorder
}

// MockRistrettoItfMockRecorder is the mock recorder for MockRistrettoItf
type MockRistrettoItfMockRecorder struct {
	mock *MockRistrettoItf
}

// NewMockRistrettoItf creates a new mock instance
func NewMockRistrettoItf(ctrl *gomock.Controller) *MockRistrettoItf {
	mock := &MockRistrettoItf{ctrl: ctrl}
	mock.recorder = &MockRistrettoItfMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRistrettoItf) EXPECT() *MockRistrettoItfMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockRistrettoItf) Get(ctx context.Context, key string) (interface{}, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, key)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockRistrettoItfMockRecorder) Get(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRistrettoItf)(nil).Get), ctx, key)
}

// Set mocks base method
func (m *MockRistrettoItf) Set(ctx context.Context, key string, value interface{}) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", ctx, key, value)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Set indicates an expected call of Set
func (mr *MockRistrettoItfMockRecorder) Set(ctx, key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockRistrettoItf)(nil).Set), ctx, key, value)
}

// SetEX mocks base method
func (m *MockRistrettoItf) SetEX(ctx context.Context, key string, value interface{}, TTL time.Duration) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetEX", ctx, key, value, TTL)
	ret0, _ := ret[0].(bool)
	return ret0
}

// SetEX indicates an expected call of SetEX
func (mr *MockRistrettoItfMockRecorder) SetEX(ctx, key, value, TTL interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetEX", reflect.TypeOf((*MockRistrettoItf)(nil).SetEX), ctx, key, value, TTL)
}

// Del mocks base method
func (m *MockRistrettoItf) Del(ctx context.Context, key string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Del", ctx, key)
}

// Del indicates an expected call of Del
func (mr *MockRistrettoItfMockRecorder) Del(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Del", reflect.TypeOf((*MockRistrettoItf)(nil).Del), ctx, key)
}

// Clear mocks base method
func (m *MockRistrettoItf) Clear(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Clear", ctx)
}

// Clear indicates an expected call of Clear
func (mr *MockRistrettoItfMockRecorder) Clear(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clear", reflect.TypeOf((*MockRistrettoItf)(nil).Clear), ctx)
}

// Close mocks base method
func (m *MockRistrettoItf) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close
func (mr *MockRistrettoItfMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockRistrettoItf)(nil).Close))
}
