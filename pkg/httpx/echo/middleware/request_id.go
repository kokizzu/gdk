package middleware

import (
	"context"

	"github.com/labstack/echo/v4"
	"github.com/labstack/echo/v4/middleware"
	"github.com/peractio/gdk/pkg/logx"
	"github.com/segmentio/ksuid"
)

type (
	// RequestIDConfig defines the config for RequestID middleware.
	RequestIDConfig struct {
		// Skipper defines a function to skip middleware.
		Skipper middleware.Skipper

		// Generator defines a function to generate an ID.
		// Optional. Default value random.String(32).
		Generator func() string
	}
)

var (
	// DefaultRequestIDConfig is the default RequestID middleware config.
	DefaultRequestIDConfig = RequestIDConfig{
		Skipper: middleware.DefaultSkipper,
		Generator: func() string {
			return ksuid.New().String()
		},
	}
)

// RequestID returns a X-Request-ID middleware.
// Generate an uuid if request header X-Request-ID is empty.
// Prefix `be-` means it was generated by server instead of client.
func RequestID() echo.MiddlewareFunc {
	return RequestIDWithConfig(DefaultRequestIDConfig)
}

// RequestIDWithConfig returns a X-Request-ID middleware with config.
func RequestIDWithConfig(config RequestIDConfig) echo.MiddlewareFunc {
	// Defaults
	if config.Skipper == nil {
		config.Skipper = DefaultRequestIDConfig.Skipper
	}
	if config.Generator == nil {
		config.Generator = DefaultRequestIDConfig.Generator
	}

	return func(next echo.HandlerFunc) echo.HandlerFunc {
		return func(c echo.Context) error {
			if config.Skipper(c) {
				return next(c)
			}

			var (
				req = c.Request()
				res = c.Response()
			)

			// check if client pass the X-Request-ID header on request.
			// if empty generate one instead.
			rid := req.Header.Get(echo.HeaderXRequestID)
			if rid == "" {
				rid = config.Generator()
			}

			// set the X-Request-ID on response header too.
			res.Header().Set(echo.HeaderXRequestID, rid)

			// create context with X-Request-ID value.
			ctx := context.WithValue(req.Context(), logx.CtxKeyRequestID, rid)
			c.SetRequest(req.WithContext(ctx))

			return next(c)
		}
	}
}
