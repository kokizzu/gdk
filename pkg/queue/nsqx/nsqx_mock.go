// Code generated by MockGen. DO NOT EDIT.
// Source: nsqx.go

// Package nsqx is a generated GoMock package.
package nsqx

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockPublisherItf is a mock of PublisherItf interface.
type MockPublisherItf struct {
	ctrl     *gomock.Controller
	recorder *MockPublisherItfMockRecorder
}

// MockPublisherItfMockRecorder is the mock recorder for MockPublisherItf.
type MockPublisherItfMockRecorder struct {
	mock *MockPublisherItf
}

// NewMockPublisherItf creates a new mock instance.
func NewMockPublisherItf(ctrl *gomock.Controller) *MockPublisherItf {
	mock := &MockPublisherItf{ctrl: ctrl}
	mock.recorder = &MockPublisherItfMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPublisherItf) EXPECT() *MockPublisherItfMockRecorder {
	return m.recorder
}

// DeferredPublish mocks base method.
func (m *MockPublisherItf) DeferredPublish(ctx context.Context, topic string, delay time.Duration, data interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeferredPublish", ctx, topic, delay, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeferredPublish indicates an expected call of DeferredPublish.
func (mr *MockPublisherItfMockRecorder) DeferredPublish(ctx, topic, delay, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeferredPublish", reflect.TypeOf((*MockPublisherItf)(nil).DeferredPublish), ctx, topic, delay, data)
}

// Publish mocks base method.
func (m *MockPublisherItf) Publish(ctx context.Context, topic string, data interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", ctx, topic, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish.
func (mr *MockPublisherItfMockRecorder) Publish(ctx, topic, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockPublisherItf)(nil).Publish), ctx, topic, data)
}
