// Code generated by MockGen. DO NOT EDIT.
// Source: cache.go

// Package cache is a generated GoMock package.
package cache

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockRedisClientItf is a mock of RedisClientItf interface.
type MockRedisClientItf struct {
	ctrl     *gomock.Controller
	recorder *MockRedisClientItfMockRecorder
}

// MockRedisClientItfMockRecorder is the mock recorder for MockRedisClientItf.
type MockRedisClientItfMockRecorder struct {
	mock *MockRedisClientItf
}

// NewMockRedisClientItf creates a new mock instance.
func NewMockRedisClientItf(ctrl *gomock.Controller) *MockRedisClientItf {
	mock := &MockRedisClientItf{ctrl: ctrl}
	mock.recorder = &MockRedisClientItfMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRedisClientItf) EXPECT() *MockRedisClientItfMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockRedisClientItf) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockRedisClientItfMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockRedisClientItf)(nil).Close))
}

// Del mocks base method.
func (m *MockRedisClientItf) Del(ctx context.Context, key ...any) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range key {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Del", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Del indicates an expected call of Del.
func (mr *MockRedisClientItfMockRecorder) Del(ctx interface{}, key ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, key...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Del", reflect.TypeOf((*MockRedisClientItf)(nil).Del), varargs...)
}

// Exists mocks base method.
func (m *MockRedisClientItf) Exists(ctx context.Context, key string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", ctx, key)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *MockRedisClientItfMockRecorder) Exists(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockRedisClientItf)(nil).Exists), ctx, key)
}

// Expire mocks base method.
func (m *MockRedisClientItf) Expire(ctx context.Context, key string, seconds int64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Expire", ctx, key, seconds)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Expire indicates an expected call of Expire.
func (mr *MockRedisClientItfMockRecorder) Expire(ctx, key, seconds interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Expire", reflect.TypeOf((*MockRedisClientItf)(nil).Expire), ctx, key, seconds)
}

// Get mocks base method.
func (m *MockRedisClientItf) Get(ctx context.Context, key string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, key)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockRedisClientItfMockRecorder) Get(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRedisClientItf)(nil).Get), ctx, key)
}

// HExists mocks base method.
func (m *MockRedisClientItf) HExists(ctx context.Context, key, field string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HExists", ctx, key, field)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HExists indicates an expected call of HExists.
func (mr *MockRedisClientItfMockRecorder) HExists(ctx, key, field interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HExists", reflect.TypeOf((*MockRedisClientItf)(nil).HExists), ctx, key, field)
}

// HGet mocks base method.
func (m *MockRedisClientItf) HGet(ctx context.Context, key, field string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HGet", ctx, key, field)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HGet indicates an expected call of HGet.
func (mr *MockRedisClientItfMockRecorder) HGet(ctx, key, field interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HGet", reflect.TypeOf((*MockRedisClientItf)(nil).HGet), ctx, key, field)
}

// HSet mocks base method.
func (m *MockRedisClientItf) HSet(ctx context.Context, key, field, value string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HSet", ctx, key, field, value)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HSet indicates an expected call of HSet.
func (mr *MockRedisClientItfMockRecorder) HSet(ctx, key, field, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HSet", reflect.TypeOf((*MockRedisClientItf)(nil).HSet), ctx, key, field, value)
}

// SetEX mocks base method.
func (m *MockRedisClientItf) SetEX(ctx context.Context, key string, seconds int64, value string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetEX", ctx, key, seconds, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetEX indicates an expected call of SetEX.
func (mr *MockRedisClientItfMockRecorder) SetEX(ctx, key, seconds, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetEX", reflect.TypeOf((*MockRedisClientItf)(nil).SetEX), ctx, key, seconds, value)
}

// SetNX mocks base method.
func (m *MockRedisClientItf) SetNX(ctx context.Context, key string, seconds int64, value string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetNX", ctx, key, seconds, value)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetNX indicates an expected call of SetNX.
func (mr *MockRedisClientItfMockRecorder) SetNX(ctx, key, seconds, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetNX", reflect.TypeOf((*MockRedisClientItf)(nil).SetNX), ctx, key, seconds, value)
}

// TTL mocks base method.
func (m *MockRedisClientItf) TTL(ctx context.Context, key string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TTL", ctx, key)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TTL indicates an expected call of TTL.
func (mr *MockRedisClientItfMockRecorder) TTL(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TTL", reflect.TypeOf((*MockRedisClientItf)(nil).TTL), ctx, key)
}

// MockRistrettoClientItf is a mock of RistrettoClientItf interface.
type MockRistrettoClientItf struct {
	ctrl     *gomock.Controller
	recorder *MockRistrettoClientItfMockRecorder
}

// MockRistrettoClientItfMockRecorder is the mock recorder for MockRistrettoClientItf.
type MockRistrettoClientItfMockRecorder struct {
	mock *MockRistrettoClientItf
}

// NewMockRistrettoClientItf creates a new mock instance.
func NewMockRistrettoClientItf(ctrl *gomock.Controller) *MockRistrettoClientItf {
	mock := &MockRistrettoClientItf{ctrl: ctrl}
	mock.recorder = &MockRistrettoClientItfMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRistrettoClientItf) EXPECT() *MockRistrettoClientItfMockRecorder {
	return m.recorder
}

// Clear mocks base method.
func (m *MockRistrettoClientItf) Clear(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Clear", ctx)
}

// Clear indicates an expected call of Clear.
func (mr *MockRistrettoClientItfMockRecorder) Clear(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clear", reflect.TypeOf((*MockRistrettoClientItf)(nil).Clear), ctx)
}

// Close mocks base method.
func (m *MockRistrettoClientItf) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockRistrettoClientItfMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockRistrettoClientItf)(nil).Close))
}

// Del mocks base method.
func (m *MockRistrettoClientItf) Del(ctx context.Context, key string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Del", ctx, key)
}

// Del indicates an expected call of Del.
func (mr *MockRistrettoClientItfMockRecorder) Del(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Del", reflect.TypeOf((*MockRistrettoClientItf)(nil).Del), ctx, key)
}

// Get mocks base method.
func (m *MockRistrettoClientItf) Get(ctx context.Context, key string) (any, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, key)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockRistrettoClientItfMockRecorder) Get(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRistrettoClientItf)(nil).Get), ctx, key)
}

// Set mocks base method.
func (m *MockRistrettoClientItf) Set(ctx context.Context, key string, value any) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", ctx, key, value)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockRistrettoClientItfMockRecorder) Set(ctx, key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockRistrettoClientItf)(nil).Set), ctx, key, value)
}

// SetEX mocks base method.
func (m *MockRistrettoClientItf) SetEX(ctx context.Context, key string, value any, TTL time.Duration) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetEX", ctx, key, value, TTL)
	ret0, _ := ret[0].(bool)
	return ret0
}

// SetEX indicates an expected call of SetEX.
func (mr *MockRistrettoClientItfMockRecorder) SetEX(ctx, key, value, TTL interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetEX", reflect.TypeOf((*MockRistrettoClientItf)(nil).SetEX), ctx, key, value, TTL)
}
